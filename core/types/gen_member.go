// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
)

// MarshalJSON marshals as JSON.
func (m Member) MarshalJSON() ([]byte, error) {
	type Member struct {
		PrevOffset uint64      `json:"oldOffset"   gencodec:"required"`
		NewOffset  uint64      `json:"newOffset"   gencodec:"required"`
		PrevSlot   common.Hash `json:"oldSlot"     gencodec:"required"`
		NewSlot    common.Hash `json:"newSlot"     gencodec:"required"`
		Type       string      `json:"type"        gencodec:"required"`
	}
	var enc Member
	enc.PrevOffset = m.PrevOffset
	enc.NewOffset = m.NewOffset
	enc.PrevSlot = m.PrevSlot
	enc.NewSlot = m.NewSlot
	enc.Type = m.Type
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (m *Member) UnmarshalJSON(input []byte) error {
	type Member struct {
		PrevOffset *uint64      `json:"oldOffset"   gencodec:"required"`
		NewOffset  *uint64      `json:"newOffset"   gencodec:"required"`
		PrevSlot   *common.Hash `json:"oldSlot"     gencodec:"required"`
		NewSlot    *common.Hash `json:"newSlot"     gencodec:"required"`
		Type       *string      `json:"type"        gencodec:"required"`
	}
	var dec Member
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.PrevOffset == nil {
		return errors.New("missing required field 'oldOffset' for Member")
	}
	m.PrevOffset = *dec.PrevOffset
	if dec.NewOffset == nil {
		return errors.New("missing required field 'newOffset' for Member")
	}
	m.NewOffset = *dec.NewOffset
	if dec.PrevSlot == nil {
		return errors.New("missing required field 'oldSlot' for Member")
	}
	m.PrevSlot = *dec.PrevSlot
	if dec.NewSlot == nil {
		return errors.New("missing required field 'newSlot' for Member")
	}
	m.NewSlot = *dec.NewSlot
	if dec.Type == nil {
		return errors.New("missing required field 'type' for Member")
	}
	m.Type = *dec.Type
	return nil
}

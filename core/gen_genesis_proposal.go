// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
)

// MarshalJSON marshals as JSON.
func (g GenesisProposal) MarshalJSON() ([]byte, error) {
	type GenesisProposal struct {
		InFavourOf       uint64                         `json:"infavourof" gencodec:"required"`
		Against          uint64                         `json:"against" gencodec:"required"`
		Stakeholders     []common.Address               `json:"stakeholders" gencodec:"required"`
		VotesNeededToWin uint64                         `json:"votesneededtowin" gencodec:"required"`
		ProposedCode     []byte                         `json:"proposedcode" gencodec:"required"`
		CurrentState     uint8                          `json:"currentstate" gencodec:"required"`
		Votes            map[common.Address]GenesisVote `json:"votes,omitempty"`
	}
	var enc GenesisProposal
	enc.InFavourOf = g.InFavourOf
	enc.Against = g.Against
	enc.Stakeholders = g.Stakeholders
	enc.VotesNeededToWin = g.VotesNeededToWin
	enc.ProposedCode = g.ProposedCode
	enc.CurrentState = g.CurrentState
	enc.Votes = g.Votes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GenesisProposal) UnmarshalJSON(input []byte) error {
	type GenesisProposal struct {
		InFavourOf       *uint64                        `json:"infavourof" gencodec:"required"`
		Against          *uint64                        `json:"against" gencodec:"required"`
		Stakeholders     []common.Address               `json:"stakeholders" gencodec:"required"`
		VotesNeededToWin *uint64                        `json:"votesneededtowin" gencodec:"required"`
		ProposedCode     []byte                         `json:"proposedcode" gencodec:"required"`
		CurrentState     *uint8                         `json:"currentstate" gencodec:"required"`
		Votes            map[common.Address]GenesisVote `json:"votes,omitempty"`
	}
	var dec GenesisProposal
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.InFavourOf == nil {
		return errors.New("missing required field 'infavourof' for GenesisProposal")
	}
	g.InFavourOf = *dec.InFavourOf
	if dec.Against == nil {
		return errors.New("missing required field 'against' for GenesisProposal")
	}
	g.Against = *dec.Against
	if dec.Stakeholders == nil {
		return errors.New("missing required field 'stakeholders' for GenesisProposal")
	}
	g.Stakeholders = dec.Stakeholders
	if dec.VotesNeededToWin == nil {
		return errors.New("missing required field 'votesneededtowin' for GenesisProposal")
	}
	g.VotesNeededToWin = *dec.VotesNeededToWin
	if dec.ProposedCode == nil {
		return errors.New("missing required field 'proposedcode' for GenesisProposal")
	}
	g.ProposedCode = dec.ProposedCode
	if dec.CurrentState == nil {
		return errors.New("missing required field 'currentstate' for GenesisProposal")
	}
	g.CurrentState = *dec.CurrentState
	if dec.Votes != nil {
		g.Votes = dec.Votes
	}
	return nil
}

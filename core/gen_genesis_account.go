// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*genesisAccountMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g GenesisAccount) MarshalJSON() ([]byte, error) {
	type GenesisAccount struct {
		ProposalNumber   			math.HexOrDecimal64         `json:"proposalnumber,omitempty"`
		VotesNeededToWin 			uint64                      `json:"votesneededtowin,omitempty"`
		VotesNeededToDeactivate 	uint64                      `json:"votesneededtodeactivate,omitempty"`
		TimeOut						uint64						`json:"timeout,omitempty"`
		Code             			hexutil.Bytes               `json:"code,omitempty"`
		Storage          			map[storageJSON]storageJSON `json:"storage,omitempty"`
		Balance          			*math.HexOrDecimal256       `json:"balance" gencodec:"required"`
		Nonce            			math.HexOrDecimal64         `json:"nonce,omitempty"`
		Stakeholders     			[]common.Address            `json:"stakeholders,omitempty"`
		Proposals        			map[uint64]GenesisProposal  `json:"proposals,omitempty"`
		PrivateKey       			hexutil.Bytes               `json:"secretKey,omitempty"`
	}
	var enc GenesisAccount
	enc.ProposalNumber = math.HexOrDecimal64(g.ProposalNumber)
	enc.VotesNeededToWin = g.VotesNeededToWin
	enc.VotesNeededToDeactivate = g.VotesNeededToDeactivate
	enc.TimeOut = g.TimeOut
	enc.Code = g.Code
	if g.Storage != nil {
		enc.Storage = make(map[storageJSON]storageJSON, len(g.Storage))
		for k, v := range g.Storage {
			enc.Storage[storageJSON(k)] = storageJSON(v)
		}
	}
	enc.Balance = (*math.HexOrDecimal256)(g.Balance)
	enc.Nonce = math.HexOrDecimal64(g.Nonce)
	enc.Stakeholders = g.Stakeholders
	enc.Proposals = g.Proposals
	enc.PrivateKey = g.PrivateKey
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GenesisAccount) UnmarshalJSON(input []byte) error {
	type GenesisAccount struct {
		ProposalNumber   			*math.HexOrDecimal64        `json:"proposalnumber,omitempty"`
		VotesNeededToWin 			*uint64                     `json:"votesneededtowin,omitempty"`
		VotesNeededToDeactivate 	*uint64                     `json:"votesneededtodeactivate,omitempty"`
		TimeOut 					*uint64                     `json:"timeout,omitempty"`
		Code            	 		*hexutil.Bytes              `json:"code,omitempty"`
		Storage          			map[storageJSON]storageJSON `json:"storage,omitempty"`
		Balance          			*math.HexOrDecimal256       `json:"balance" gencodec:"required"`
		Nonce            			*math.HexOrDecimal64        `json:"nonce,omitempty"`
		Stakeholders     			[]common.Address            `json:"stakeholders,omitempty"`
		Proposals        			map[uint64]GenesisProposal  `json:"proposals,omitempty"`
		PrivateKey       			*hexutil.Bytes              `json:"secretKey,omitempty"`
	}
	var dec GenesisAccount
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ProposalNumber != nil {
		g.ProposalNumber = uint64(*dec.ProposalNumber)
	}
	if dec.VotesNeededToWin != nil {
		g.VotesNeededToWin = *dec.VotesNeededToWin
	}
	if dec.VotesNeededToDeactivate != nil {
		g.VotesNeededToDeactivate = *dec.VotesNeededToDeactivate
	}
	if dec.TimeOut != nil {
		g.TimeOut = *dec.TimeOut
	}
	if dec.Code != nil {
		g.Code = *dec.Code
	}
	if dec.Storage != nil {
		g.Storage = make(map[common.Hash]common.Hash, len(dec.Storage))
		for k, v := range dec.Storage {
			g.Storage[common.Hash(k)] = common.Hash(v)
		}
	}
	if dec.Balance == nil {
		return errors.New("missing required field 'balance' for GenesisAccount")
	}
	g.Balance = (*big.Int)(dec.Balance)
	if dec.Nonce != nil {
		g.Nonce = uint64(*dec.Nonce)
	}
	if dec.Stakeholders != nil {
		g.Stakeholders = dec.Stakeholders
	}
	if dec.Proposals != nil {
		g.Proposals = dec.Proposals
	}
	if dec.PrivateKey != nil {
		g.PrivateKey = *dec.PrivateKey
	}
	return nil
}

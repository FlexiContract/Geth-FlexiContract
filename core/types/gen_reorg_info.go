// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
)

// MarshalJSON marshals as JSON.
func (r ReorgInfo) MarshalJSON() ([]byte, error) {
	type ReorgInfo struct {
		Type       string      `json:"type"        gencodec:"required"`
		Label      string      `json:"label"       gencodec:"required"`
		PrevSlot   common.Hash `json:"oldSlot"     gencodec:"required"`
		NewSlot    common.Hash `json:"newSlot"     gencodec:"required"`
		PrevOffset uint64      `json:"oldOffset"   gencodec:"required"`
		NewOffset  uint64      `json:"newOffset"   gencodec:"required"`
	}
	var enc ReorgInfo
	enc.Type = r.Type
	enc.Label = r.Label
	enc.PrevSlot = r.PrevSlot
	enc.NewSlot = r.NewSlot
	enc.PrevOffset = r.PrevOffset
	enc.NewOffset = r.NewOffset
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *ReorgInfo) UnmarshalJSON(input []byte) error {
	type ReorgInfo struct {
		Type       *string      `json:"type"        gencodec:"required"`
		Label      *string      `json:"label"       gencodec:"required"`
		PrevSlot   *common.Hash `json:"oldSlot"     gencodec:"required"`
		NewSlot    *common.Hash `json:"newSlot"     gencodec:"required"`
		PrevOffset *uint64      `json:"oldOffset"   gencodec:"required"`
		NewOffset  *uint64      `json:"newOffset"   gencodec:"required"`
	}
	var dec ReorgInfo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type == nil {
		return errors.New("missing required field 'type' for ReorgInfo")
	}
	r.Type = *dec.Type
	if dec.Label == nil {
		return errors.New("missing required field 'label' for ReorgInfo")
	}
	r.Label = *dec.Label
	if dec.PrevSlot == nil {
		return errors.New("missing required field 'oldSlot' for ReorgInfo")
	}
	r.PrevSlot = *dec.PrevSlot
	if dec.NewSlot == nil {
		return errors.New("missing required field 'newSlot' for ReorgInfo")
	}
	r.NewSlot = *dec.NewSlot
	if dec.PrevOffset == nil {
		return errors.New("missing required field 'oldOffset' for ReorgInfo")
	}
	r.PrevOffset = *dec.PrevOffset
	if dec.NewOffset == nil {
		return errors.New("missing required field 'newOffset' for ReorgInfo")
	}
	r.NewOffset = *dec.NewOffset
	return nil
}

// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
)

// MarshalJSON marshals as JSON.
func (d DataType) MarshalJSON() ([]byte, error) {
	type DataType struct {
		Type          string `json:"type"                 gencodec:"required"`
		Base          string `json:"base"`
		Encoding      string `json:"encoding"             gencodec:"required"`
		NumberOfBytes uint64 `json:"numberOfBytes"        gencodec:"required"`
	}
	var enc DataType
	enc.Type = d.Type
	enc.Base = d.Base
	enc.Encoding = d.Encoding
	enc.NumberOfBytes = d.NumberOfBytes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (d *DataType) UnmarshalJSON(input []byte) error {
	type DataType struct {
		Type          *string `json:"type"                 gencodec:"required"`
		Base          *string `json:"base"`
		Encoding      *string `json:"encoding"             gencodec:"required"`
		NumberOfBytes *uint64 `json:"numberOfBytes"        gencodec:"required"`
	}
	var dec DataType
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type == nil {
		return errors.New("missing required field 'type' for DataType")
	}
	d.Type = *dec.Type
	if dec.Base != nil {
		d.Base = *dec.Base
	}
	if dec.Encoding == nil {
		return errors.New("missing required field 'encoding' for DataType")
	}
	d.Encoding = *dec.Encoding
	if dec.NumberOfBytes == nil {
		return errors.New("missing required field 'numberOfBytes' for DataType")
	}
	d.NumberOfBytes = *dec.NumberOfBytes
	return nil
}

// Code generated by rlpgen. DO NOT EDIT.

//go:build !norlpgen
// +build !norlpgen

package types

import "github.com/ethereum/go-ethereum/rlp"
import "io"

func (obj *Proposal) EncodeRLP(_w io.Writer) error {
	w := rlp.NewEncoderBuffer(_w)
	_tmp0 := w.List()
	w.WriteUint64(obj.InFavourOf)
	w.WriteUint64(obj.Against)
	_tmp1 := w.List()
	for _, _tmp2 := range obj.Stakeholders {
		w.WriteBytes(_tmp2[:])
	}
	w.ListEnd(_tmp1)
	w.WriteUint64(obj.VotesNeededToWin)
	if obj.BlockNumber == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.BlockNumber.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.BlockNumber)
	}
	w.WriteUint64(obj.TimeOut)
	w.WriteUint64(obj.VotesNeededToDeactivate)
	w.WriteBytes(obj.ProposedCodeHash)
	w.WriteUint64(uint64(obj.CurrentState))
	_tmp3 := w.List()
	for _, _tmp4 := range obj.ReorgInfoList {
		_tmp5 := w.List()
		w.WriteString(_tmp4.Type)
		w.WriteBytes(_tmp4.PrevSlot[:])
		w.WriteBytes(_tmp4.NewSlot[:])
		w.WriteUint64(_tmp4.PrevOffset)
		w.WriteUint64(_tmp4.NewOffset)
		w.ListEnd(_tmp5)
	}
	w.ListEnd(_tmp3)
	_tmp6 := w.List()
	for _, _tmp7 := range obj.DataTypeList {
		_tmp8 := w.List()
		w.WriteString(_tmp7.Type)
		w.WriteString(_tmp7.Base)
		w.WriteString(_tmp7.Encoding)
		w.WriteUint64(_tmp7.PrevNumberOfBytes)
		w.WriteUint64(_tmp7.NewNumberOfBytes)
		_tmp9 := w.List()
		for _, _tmp10 := range _tmp7.Members {
			_tmp11 := w.List()
			w.WriteUint64(_tmp10.PrevOffset)
			w.WriteUint64(_tmp10.NewOffset)
			w.WriteBytes(_tmp10.PrevSlot[:])
			w.WriteBytes(_tmp10.NewSlot[:])
			w.WriteString(_tmp10.Type)
			w.ListEnd(_tmp11)
		}
		w.ListEnd(_tmp9)
		w.ListEnd(_tmp8)
	}
	w.ListEnd(_tmp6)
	w.ListEnd(_tmp0)
	return w.Flush()
}
